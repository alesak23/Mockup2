#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="data")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAffiliated_With(Affiliated_With instance);
    partial void UpdateAffiliated_With(Affiliated_With instance);
    partial void DeleteAffiliated_With(Affiliated_With instance);
    partial void InsertUndergoe(Undergoe instance);
    partial void UpdateUndergoe(Undergoe instance);
    partial void DeleteUndergoe(Undergoe instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertBlock(Block instance);
    partial void UpdateBlock(Block instance);
    partial void DeleteBlock(Block instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertMedication(Medication instance);
    partial void UpdateMedication(Medication instance);
    partial void DeleteMedication(Medication instance);
    partial void InsertNurse(Nurse instance);
    partial void UpdateNurse(Nurse instance);
    partial void DeleteNurse(Nurse instance);
    partial void InsertOn_Call(On_Call instance);
    partial void UpdateOn_Call(On_Call instance);
    partial void DeleteOn_Call(On_Call instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPhysician(Physician instance);
    partial void UpdatePhysician(Physician instance);
    partial void DeletePhysician(Physician instance);
    partial void InsertPrescribe(Prescribe instance);
    partial void UpdatePrescribe(Prescribe instance);
    partial void DeletePrescribe(Prescribe instance);
    partial void InsertProcedure(Procedure instance);
    partial void UpdateProcedure(Procedure instance);
    partial void DeleteProcedure(Procedure instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertStay(Stay instance);
    partial void UpdateStay(Stay instance);
    partial void DeleteStay(Stay instance);
    partial void InsertTrained_In(Trained_In instance);
    partial void UpdateTrained_In(Trained_In instance);
    partial void DeleteTrained_In(Trained_In instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Hospital.Properties.Settings.Default.dataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Affiliated_With> Affiliated_Withs
		{
			get
			{
				return this.GetTable<Affiliated_With>();
			}
		}
		
		public System.Data.Linq.Table<Undergoe> Undergoes
		{
			get
			{
				return this.GetTable<Undergoe>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<Block> Blocks
		{
			get
			{
				return this.GetTable<Block>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Medication> Medications
		{
			get
			{
				return this.GetTable<Medication>();
			}
		}
		
		public System.Data.Linq.Table<Nurse> Nurses
		{
			get
			{
				return this.GetTable<Nurse>();
			}
		}
		
		public System.Data.Linq.Table<On_Call> On_Calls
		{
			get
			{
				return this.GetTable<On_Call>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Physician> Physicians
		{
			get
			{
				return this.GetTable<Physician>();
			}
		}
		
		public System.Data.Linq.Table<Prescribe> Prescribes
		{
			get
			{
				return this.GetTable<Prescribe>();
			}
		}
		
		public System.Data.Linq.Table<Procedure> Procedures
		{
			get
			{
				return this.GetTable<Procedure>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Stay> Stays
		{
			get
			{
				return this.GetTable<Stay>();
			}
		}
		
		public System.Data.Linq.Table<Trained_In> Trained_Ins
		{
			get
			{
				return this.GetTable<Trained_In>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Affiliated_With")]
	public partial class Affiliated_With : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Physician;
		
		private int _Department;
		
		private bool _PrimaryAffiliation;
		
		private EntityRef<Department> _Department1;
		
		private EntityRef<Physician> _Physician1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicianChanging(int value);
    partial void OnPhysicianChanged();
    partial void OnDepartmentChanging(int value);
    partial void OnDepartmentChanged();
    partial void OnPrimaryAffiliationChanging(bool value);
    partial void OnPrimaryAffiliationChanged();
    #endregion
		
		public Affiliated_With()
		{
			this._Department1 = default(EntityRef<Department>);
			this._Physician1 = default(EntityRef<Physician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Physician
		{
			get
			{
				return this._Physician;
			}
			set
			{
				if ((this._Physician != value))
				{
					if (this._Physician1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianChanging(value);
					this.SendPropertyChanging();
					this._Physician = value;
					this.SendPropertyChanged("Physician");
					this.OnPhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryAffiliation", DbType="Bit NOT NULL")]
		public bool PrimaryAffiliation
		{
			get
			{
				return this._PrimaryAffiliation;
			}
			set
			{
				if ((this._PrimaryAffiliation != value))
				{
					this.OnPrimaryAffiliationChanging(value);
					this.SendPropertyChanging();
					this._PrimaryAffiliation = value;
					this.SendPropertyChanged("PrimaryAffiliation");
					this.OnPrimaryAffiliationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Affiliated_With", Storage="_Department1", ThisKey="Department", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Affiliated_Withs.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Affiliated_Withs.Add(this);
						this._Department = value.DepartmentID;
					}
					else
					{
						this._Department = default(int);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Affiliated_With", Storage="_Physician1", ThisKey="Physician", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician1
		{
			get
			{
				return this._Physician1.Entity;
			}
			set
			{
				Physician previousValue = this._Physician1.Entity;
				if (((previousValue != value) 
							|| (this._Physician1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician1.Entity = null;
						previousValue.Affiliated_Withs.Remove(this);
					}
					this._Physician1.Entity = value;
					if ((value != null))
					{
						value.Affiliated_Withs.Add(this);
						this._Physician = value.EmployeeID;
					}
					else
					{
						this._Physician = default(int);
					}
					this.SendPropertyChanged("Physician1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Undergoes")]
	public partial class Undergoe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Patient;
		
		private int _Procedures;
		
		private int _Stay;
		
		private System.DateTime _DateUndergoes;
		
		private int _Physician;
		
		private System.Nullable<int> _AssistingNurse;
		
		private EntityRef<Nurse> _Nurse;
		
		private EntityRef<Patient> _Patient1;
		
		private EntityRef<Physician> _Physician1;
		
		private EntityRef<Procedure> _Procedure;
		
		private EntityRef<Stay> _Stay1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientChanging(int value);
    partial void OnPatientChanged();
    partial void OnProceduresChanging(int value);
    partial void OnProceduresChanged();
    partial void OnStayChanging(int value);
    partial void OnStayChanged();
    partial void OnDateUndergoesChanging(System.DateTime value);
    partial void OnDateUndergoesChanged();
    partial void OnPhysicianChanging(int value);
    partial void OnPhysicianChanged();
    partial void OnAssistingNurseChanging(System.Nullable<int> value);
    partial void OnAssistingNurseChanged();
    #endregion
		
		public Undergoe()
		{
			this._Nurse = default(EntityRef<Nurse>);
			this._Patient1 = default(EntityRef<Patient>);
			this._Physician1 = default(EntityRef<Physician>);
			this._Procedure = default(EntityRef<Procedure>);
			this._Stay1 = default(EntityRef<Stay>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Patient
		{
			get
			{
				return this._Patient;
			}
			set
			{
				if ((this._Patient != value))
				{
					if (this._Patient1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientChanging(value);
					this.SendPropertyChanging();
					this._Patient = value;
					this.SendPropertyChanged("Patient");
					this.OnPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Procedures", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Procedures
		{
			get
			{
				return this._Procedures;
			}
			set
			{
				if ((this._Procedures != value))
				{
					if (this._Procedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProceduresChanging(value);
					this.SendPropertyChanging();
					this._Procedures = value;
					this.SendPropertyChanged("Procedures");
					this.OnProceduresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stay", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Stay
		{
			get
			{
				return this._Stay;
			}
			set
			{
				if ((this._Stay != value))
				{
					if (this._Stay1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStayChanging(value);
					this.SendPropertyChanging();
					this._Stay = value;
					this.SendPropertyChanged("Stay");
					this.OnStayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUndergoes", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DateUndergoes
		{
			get
			{
				return this._DateUndergoes;
			}
			set
			{
				if ((this._DateUndergoes != value))
				{
					this.OnDateUndergoesChanging(value);
					this.SendPropertyChanging();
					this._DateUndergoes = value;
					this.SendPropertyChanged("DateUndergoes");
					this.OnDateUndergoesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician", DbType="Int NOT NULL")]
		public int Physician
		{
			get
			{
				return this._Physician;
			}
			set
			{
				if ((this._Physician != value))
				{
					if (this._Physician1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianChanging(value);
					this.SendPropertyChanging();
					this._Physician = value;
					this.SendPropertyChanged("Physician");
					this.OnPhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistingNurse", DbType="Int")]
		public System.Nullable<int> AssistingNurse
		{
			get
			{
				return this._AssistingNurse;
			}
			set
			{
				if ((this._AssistingNurse != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssistingNurseChanging(value);
					this.SendPropertyChanging();
					this._AssistingNurse = value;
					this.SendPropertyChanged("AssistingNurse");
					this.OnAssistingNurseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Undergoe", Storage="_Nurse", ThisKey="AssistingNurse", OtherKey="EmployeeID", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.Undergoes.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.Undergoes.Add(this);
						this._AssistingNurse = value.EmployeeID;
					}
					else
					{
						this._AssistingNurse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Undergoe", Storage="_Patient1", ThisKey="Patient", OtherKey="SSN", IsForeignKey=true)]
		public Patient Patient1
		{
			get
			{
				return this._Patient1.Entity;
			}
			set
			{
				Patient previousValue = this._Patient1.Entity;
				if (((previousValue != value) 
							|| (this._Patient1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient1.Entity = null;
						previousValue.Undergoes.Remove(this);
					}
					this._Patient1.Entity = value;
					if ((value != null))
					{
						value.Undergoes.Add(this);
						this._Patient = value.SSN;
					}
					else
					{
						this._Patient = default(int);
					}
					this.SendPropertyChanged("Patient1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Undergoe", Storage="_Physician1", ThisKey="Physician", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician1
		{
			get
			{
				return this._Physician1.Entity;
			}
			set
			{
				Physician previousValue = this._Physician1.Entity;
				if (((previousValue != value) 
							|| (this._Physician1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician1.Entity = null;
						previousValue.Undergoes.Remove(this);
					}
					this._Physician1.Entity = value;
					if ((value != null))
					{
						value.Undergoes.Add(this);
						this._Physician = value.EmployeeID;
					}
					else
					{
						this._Physician = default(int);
					}
					this.SendPropertyChanged("Physician1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Procedure_Undergoe", Storage="_Procedure", ThisKey="Procedures", OtherKey="Code", IsForeignKey=true)]
		public Procedure Procedure
		{
			get
			{
				return this._Procedure.Entity;
			}
			set
			{
				Procedure previousValue = this._Procedure.Entity;
				if (((previousValue != value) 
							|| (this._Procedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Procedure.Entity = null;
						previousValue.Undergoes.Remove(this);
					}
					this._Procedure.Entity = value;
					if ((value != null))
					{
						value.Undergoes.Add(this);
						this._Procedures = value.Code;
					}
					else
					{
						this._Procedures = default(int);
					}
					this.SendPropertyChanged("Procedure");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stay_Undergoe", Storage="_Stay1", ThisKey="Stay", OtherKey="StayID", IsForeignKey=true)]
		public Stay Stay1
		{
			get
			{
				return this._Stay1.Entity;
			}
			set
			{
				Stay previousValue = this._Stay1.Entity;
				if (((previousValue != value) 
							|| (this._Stay1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stay1.Entity = null;
						previousValue.Undergoes.Remove(this);
					}
					this._Stay1.Entity = value;
					if ((value != null))
					{
						value.Undergoes.Add(this);
						this._Stay = value.StayID;
					}
					else
					{
						this._Stay = default(int);
					}
					this.SendPropertyChanged("Stay1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppointmentID;
		
		private int _Patient;
		
		private System.Nullable<int> _PrepNurse;
		
		private int _Physician;
		
		private System.DateTime _Start;
		
		private System.DateTime _EndOfApp;
		
		private string _ExaminationRoom;
		
		private EntitySet<Prescribe> _Prescribes;
		
		private EntityRef<Nurse> _Nurse;
		
		private EntityRef<Patient> _Patient1;
		
		private EntityRef<Physician> _Physician1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnPatientChanging(int value);
    partial void OnPatientChanged();
    partial void OnPrepNurseChanging(System.Nullable<int> value);
    partial void OnPrepNurseChanged();
    partial void OnPhysicianChanging(int value);
    partial void OnPhysicianChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndOfAppChanging(System.DateTime value);
    partial void OnEndOfAppChanged();
    partial void OnExaminationRoomChanging(string value);
    partial void OnExaminationRoomChanged();
    #endregion
		
		public Appointment()
		{
			this._Prescribes = new EntitySet<Prescribe>(new Action<Prescribe>(this.attach_Prescribes), new Action<Prescribe>(this.detach_Prescribes));
			this._Nurse = default(EntityRef<Nurse>);
			this._Patient1 = default(EntityRef<Patient>);
			this._Physician1 = default(EntityRef<Physician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient", DbType="Int NOT NULL")]
		public int Patient
		{
			get
			{
				return this._Patient;
			}
			set
			{
				if ((this._Patient != value))
				{
					if (this._Patient1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientChanging(value);
					this.SendPropertyChanging();
					this._Patient = value;
					this.SendPropertyChanged("Patient");
					this.OnPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrepNurse", DbType="Int")]
		public System.Nullable<int> PrepNurse
		{
			get
			{
				return this._PrepNurse;
			}
			set
			{
				if ((this._PrepNurse != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrepNurseChanging(value);
					this.SendPropertyChanging();
					this._PrepNurse = value;
					this.SendPropertyChanged("PrepNurse");
					this.OnPrepNurseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician", DbType="Int NOT NULL")]
		public int Physician
		{
			get
			{
				return this._Physician;
			}
			set
			{
				if ((this._Physician != value))
				{
					if (this._Physician1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianChanging(value);
					this.SendPropertyChanging();
					this._Physician = value;
					this.SendPropertyChanged("Physician");
					this.OnPhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndOfApp", DbType="DateTime NOT NULL")]
		public System.DateTime EndOfApp
		{
			get
			{
				return this._EndOfApp;
			}
			set
			{
				if ((this._EndOfApp != value))
				{
					this.OnEndOfAppChanging(value);
					this.SendPropertyChanging();
					this._EndOfApp = value;
					this.SendPropertyChanged("EndOfApp");
					this.OnEndOfAppChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminationRoom", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ExaminationRoom
		{
			get
			{
				return this._ExaminationRoom;
			}
			set
			{
				if ((this._ExaminationRoom != value))
				{
					this.OnExaminationRoomChanging(value);
					this.SendPropertyChanging();
					this._ExaminationRoom = value;
					this.SendPropertyChanged("ExaminationRoom");
					this.OnExaminationRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Prescribe", Storage="_Prescribes", ThisKey="AppointmentID", OtherKey="Appointment")]
		public EntitySet<Prescribe> Prescribes
		{
			get
			{
				return this._Prescribes;
			}
			set
			{
				this._Prescribes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Appointment", Storage="_Nurse", ThisKey="PrepNurse", OtherKey="EmployeeID", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._PrepNurse = value.EmployeeID;
					}
					else
					{
						this._PrepNurse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient1", ThisKey="Patient", OtherKey="SSN", IsForeignKey=true)]
		public Patient Patient1
		{
			get
			{
				return this._Patient1.Entity;
			}
			set
			{
				Patient previousValue = this._Patient1.Entity;
				if (((previousValue != value) 
							|| (this._Patient1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient1.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Patient1.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._Patient = value.SSN;
					}
					else
					{
						this._Patient = default(int);
					}
					this.SendPropertyChanged("Patient1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Appointment", Storage="_Physician1", ThisKey="Physician", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician1
		{
			get
			{
				return this._Physician1.Entity;
			}
			set
			{
				Physician previousValue = this._Physician1.Entity;
				if (((previousValue != value) 
							|| (this._Physician1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician1.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Physician1.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._Physician = value.EmployeeID;
					}
					else
					{
						this._Physician = default(int);
					}
					this.SendPropertyChanged("Physician1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Appointment1 = this;
		}
		
		private void detach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Appointment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Block")]
	public partial class Block : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BlockFloor;
		
		private int _BlockCode;
		
		private EntitySet<On_Call> _On_Calls;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlockFloorChanging(int value);
    partial void OnBlockFloorChanged();
    partial void OnBlockCodeChanging(int value);
    partial void OnBlockCodeChanged();
    #endregion
		
		public Block()
		{
			this._On_Calls = new EntitySet<On_Call>(new Action<On_Call>(this.attach_On_Calls), new Action<On_Call>(this.detach_On_Calls));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockFloor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlockFloor
		{
			get
			{
				return this._BlockFloor;
			}
			set
			{
				if ((this._BlockFloor != value))
				{
					this.OnBlockFloorChanging(value);
					this.SendPropertyChanging();
					this._BlockFloor = value;
					this.SendPropertyChanged("BlockFloor");
					this.OnBlockFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlockCode
		{
			get
			{
				return this._BlockCode;
			}
			set
			{
				if ((this._BlockCode != value))
				{
					this.OnBlockCodeChanging(value);
					this.SendPropertyChanging();
					this._BlockCode = value;
					this.SendPropertyChanged("BlockCode");
					this.OnBlockCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Block_On_Call", Storage="_On_Calls", ThisKey="BlockFloor,BlockCode", OtherKey="BlockFloor,BlockCode")]
		public EntitySet<On_Call> On_Calls
		{
			get
			{
				return this._On_Calls;
			}
			set
			{
				this._On_Calls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Block_Room", Storage="_Rooms", ThisKey="BlockFloor,BlockCode", OtherKey="BlockFloor,BlockCode")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_On_Calls(On_Call entity)
		{
			this.SendPropertyChanging();
			entity.Block = this;
		}
		
		private void detach_On_Calls(On_Call entity)
		{
			this.SendPropertyChanging();
			entity.Block = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Block = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Block = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _Name;
		
		private int _Head;
		
		private EntitySet<Affiliated_With> _Affiliated_Withs;
		
		private EntityRef<Physician> _Physician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHeadChanging(int value);
    partial void OnHeadChanged();
    #endregion
		
		public Department()
		{
			this._Affiliated_Withs = new EntitySet<Affiliated_With>(new Action<Affiliated_With>(this.attach_Affiliated_Withs), new Action<Affiliated_With>(this.detach_Affiliated_Withs));
			this._Physician = default(EntityRef<Physician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Head", DbType="Int NOT NULL")]
		public int Head
		{
			get
			{
				return this._Head;
			}
			set
			{
				if ((this._Head != value))
				{
					if (this._Physician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeadChanging(value);
					this.SendPropertyChanging();
					this._Head = value;
					this.SendPropertyChanged("Head");
					this.OnHeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Affiliated_With", Storage="_Affiliated_Withs", ThisKey="DepartmentID", OtherKey="Department")]
		public EntitySet<Affiliated_With> Affiliated_Withs
		{
			get
			{
				return this._Affiliated_Withs;
			}
			set
			{
				this._Affiliated_Withs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Department", Storage="_Physician", ThisKey="Head", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician
		{
			get
			{
				return this._Physician.Entity;
			}
			set
			{
				Physician previousValue = this._Physician.Entity;
				if (((previousValue != value) 
							|| (this._Physician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Physician.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._Head = value.EmployeeID;
					}
					else
					{
						this._Head = default(int);
					}
					this.SendPropertyChanged("Physician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Affiliated_Withs(Affiliated_With entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Affiliated_Withs(Affiliated_With entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medication")]
	public partial class Medication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Name;
		
		private string _Brand;
		
		private string _Description;
		
		private EntitySet<Prescribe> _Prescribes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Medication()
		{
			this._Prescribes = new EntitySet<Prescribe>(new Action<Prescribe>(this.attach_Prescribes), new Action<Prescribe>(this.detach_Prescribes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medication_Prescribe", Storage="_Prescribes", ThisKey="Code", OtherKey="Medication")]
		public EntitySet<Prescribe> Prescribes
		{
			get
			{
				return this._Prescribes;
			}
			set
			{
				this._Prescribes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Medication1 = this;
		}
		
		private void detach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Medication1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nurse")]
	public partial class Nurse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Name;
		
		private string _Position;
		
		private bool _Registered;
		
		private int _SSN;
		
		private EntitySet<Undergoe> _Undergoes;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<On_Call> _On_Calls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnRegisteredChanging(bool value);
    partial void OnRegisteredChanged();
    partial void OnSSNChanging(int value);
    partial void OnSSNChanged();
    #endregion
		
		public Nurse()
		{
			this._Undergoes = new EntitySet<Undergoe>(new Action<Undergoe>(this.attach_Undergoes), new Action<Undergoe>(this.detach_Undergoes));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._On_Calls = new EntitySet<On_Call>(new Action<On_Call>(this.attach_On_Calls), new Action<On_Call>(this.detach_On_Calls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Registered", DbType="Bit NOT NULL")]
		public bool Registered
		{
			get
			{
				return this._Registered;
			}
			set
			{
				if ((this._Registered != value))
				{
					this.OnRegisteredChanging(value);
					this.SendPropertyChanging();
					this._Registered = value;
					this.SendPropertyChanged("Registered");
					this.OnRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="Int NOT NULL")]
		public int SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Undergoe", Storage="_Undergoes", ThisKey="EmployeeID", OtherKey="AssistingNurse")]
		public EntitySet<Undergoe> Undergoes
		{
			get
			{
				return this._Undergoes;
			}
			set
			{
				this._Undergoes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Appointment", Storage="_Appointments", ThisKey="EmployeeID", OtherKey="PrepNurse")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_On_Call", Storage="_On_Calls", ThisKey="EmployeeID", OtherKey="Nurse")]
		public EntitySet<On_Call> On_Calls
		{
			get
			{
				return this._On_Calls;
			}
			set
			{
				this._On_Calls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
		
		private void attach_On_Calls(On_Call entity)
		{
			this.SendPropertyChanging();
			entity.Nurse1 = this;
		}
		
		private void detach_On_Calls(On_Call entity)
		{
			this.SendPropertyChanging();
			entity.Nurse1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.On_Call")]
	public partial class On_Call : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Nurse;
		
		private int _BlockFloor;
		
		private int _BlockCode;
		
		private System.DateTime _OnCallStart;
		
		private System.DateTime _OnCallEnd;
		
		private EntityRef<Block> _Block;
		
		private EntityRef<Nurse> _Nurse1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNurseChanging(int value);
    partial void OnNurseChanged();
    partial void OnBlockFloorChanging(int value);
    partial void OnBlockFloorChanged();
    partial void OnBlockCodeChanging(int value);
    partial void OnBlockCodeChanged();
    partial void OnOnCallStartChanging(System.DateTime value);
    partial void OnOnCallStartChanged();
    partial void OnOnCallEndChanging(System.DateTime value);
    partial void OnOnCallEndChanged();
    #endregion
		
		public On_Call()
		{
			this._Block = default(EntityRef<Block>);
			this._Nurse1 = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nurse", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Nurse
		{
			get
			{
				return this._Nurse;
			}
			set
			{
				if ((this._Nurse != value))
				{
					if (this._Nurse1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNurseChanging(value);
					this.SendPropertyChanging();
					this._Nurse = value;
					this.SendPropertyChanged("Nurse");
					this.OnNurseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockFloor", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlockFloor
		{
			get
			{
				return this._BlockFloor;
			}
			set
			{
				if ((this._BlockFloor != value))
				{
					if (this._Block.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlockFloorChanging(value);
					this.SendPropertyChanging();
					this._BlockFloor = value;
					this.SendPropertyChanged("BlockFloor");
					this.OnBlockFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BlockCode
		{
			get
			{
				return this._BlockCode;
			}
			set
			{
				if ((this._BlockCode != value))
				{
					if (this._Block.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlockCodeChanging(value);
					this.SendPropertyChanging();
					this._BlockCode = value;
					this.SendPropertyChanged("BlockCode");
					this.OnBlockCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnCallStart", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime OnCallStart
		{
			get
			{
				return this._OnCallStart;
			}
			set
			{
				if ((this._OnCallStart != value))
				{
					this.OnOnCallStartChanging(value);
					this.SendPropertyChanging();
					this._OnCallStart = value;
					this.SendPropertyChanged("OnCallStart");
					this.OnOnCallStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnCallEnd", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime OnCallEnd
		{
			get
			{
				return this._OnCallEnd;
			}
			set
			{
				if ((this._OnCallEnd != value))
				{
					this.OnOnCallEndChanging(value);
					this.SendPropertyChanging();
					this._OnCallEnd = value;
					this.SendPropertyChanged("OnCallEnd");
					this.OnOnCallEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Block_On_Call", Storage="_Block", ThisKey="BlockFloor,BlockCode", OtherKey="BlockFloor,BlockCode", IsForeignKey=true)]
		public Block Block
		{
			get
			{
				return this._Block.Entity;
			}
			set
			{
				Block previousValue = this._Block.Entity;
				if (((previousValue != value) 
							|| (this._Block.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Block.Entity = null;
						previousValue.On_Calls.Remove(this);
					}
					this._Block.Entity = value;
					if ((value != null))
					{
						value.On_Calls.Add(this);
						this._BlockFloor = value.BlockFloor;
						this._BlockCode = value.BlockCode;
					}
					else
					{
						this._BlockFloor = default(int);
						this._BlockCode = default(int);
					}
					this.SendPropertyChanged("Block");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_On_Call", Storage="_Nurse1", ThisKey="Nurse", OtherKey="EmployeeID", IsForeignKey=true)]
		public Nurse Nurse1
		{
			get
			{
				return this._Nurse1.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse1.Entity;
				if (((previousValue != value) 
							|| (this._Nurse1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse1.Entity = null;
						previousValue.On_Calls.Remove(this);
					}
					this._Nurse1.Entity = value;
					if ((value != null))
					{
						value.On_Calls.Add(this);
						this._Nurse = value.EmployeeID;
					}
					else
					{
						this._Nurse = default(int);
					}
					this.SendPropertyChanged("Nurse1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SSN;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private int _InsuranceID;
		
		private int _PCP;
		
		private EntitySet<Undergoe> _Undergoes;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Prescribe> _Prescribes;
		
		private EntitySet<Stay> _Stays;
		
		private EntityRef<Physician> _Physician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSSNChanging(int value);
    partial void OnSSNChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnInsuranceIDChanging(int value);
    partial void OnInsuranceIDChanged();
    partial void OnPCPChanging(int value);
    partial void OnPCPChanged();
    #endregion
		
		public Patient()
		{
			this._Undergoes = new EntitySet<Undergoe>(new Action<Undergoe>(this.attach_Undergoes), new Action<Undergoe>(this.detach_Undergoes));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Prescribes = new EntitySet<Prescribe>(new Action<Prescribe>(this.attach_Prescribes), new Action<Prescribe>(this.detach_Prescribes));
			this._Stays = new EntitySet<Stay>(new Action<Stay>(this.attach_Stays), new Action<Stay>(this.detach_Stays));
			this._Physician = default(EntityRef<Physician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="Int NOT NULL")]
		public int InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PCP", DbType="Int NOT NULL")]
		public int PCP
		{
			get
			{
				return this._PCP;
			}
			set
			{
				if ((this._PCP != value))
				{
					if (this._Physician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPCPChanging(value);
					this.SendPropertyChanging();
					this._PCP = value;
					this.SendPropertyChanged("PCP");
					this.OnPCPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Undergoe", Storage="_Undergoes", ThisKey="SSN", OtherKey="Patient")]
		public EntitySet<Undergoe> Undergoes
		{
			get
			{
				return this._Undergoes;
			}
			set
			{
				this._Undergoes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="SSN", OtherKey="Patient")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescribe", Storage="_Prescribes", ThisKey="SSN", OtherKey="Patient")]
		public EntitySet<Prescribe> Prescribes
		{
			get
			{
				return this._Prescribes;
			}
			set
			{
				this._Prescribes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Stay", Storage="_Stays", ThisKey="SSN", OtherKey="Patient")]
		public EntitySet<Stay> Stays
		{
			get
			{
				return this._Stays;
			}
			set
			{
				this._Stays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Patient", Storage="_Physician", ThisKey="PCP", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician
		{
			get
			{
				return this._Physician.Entity;
			}
			set
			{
				Physician previousValue = this._Physician.Entity;
				if (((previousValue != value) 
							|| (this._Physician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Physician.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._PCP = value.EmployeeID;
					}
					else
					{
						this._PCP = default(int);
					}
					this.SendPropertyChanged("Physician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = this;
		}
		
		private void detach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = null;
		}
		
		private void attach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = this;
		}
		
		private void detach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = null;
		}
		
		private void attach_Stays(Stay entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = this;
		}
		
		private void detach_Stays(Stay entity)
		{
			this.SendPropertyChanging();
			entity.Patient1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Physician")]
	public partial class Physician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Name;
		
		private string _Position;
		
		private int _SSN;
		
		private EntitySet<Affiliated_With> _Affiliated_Withs;
		
		private EntitySet<Undergoe> _Undergoes;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<Prescribe> _Prescribes;
		
		private EntitySet<Trained_In> _Trained_Ins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnSSNChanging(int value);
    partial void OnSSNChanged();
    #endregion
		
		public Physician()
		{
			this._Affiliated_Withs = new EntitySet<Affiliated_With>(new Action<Affiliated_With>(this.attach_Affiliated_Withs), new Action<Affiliated_With>(this.detach_Affiliated_Withs));
			this._Undergoes = new EntitySet<Undergoe>(new Action<Undergoe>(this.attach_Undergoes), new Action<Undergoe>(this.detach_Undergoes));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Prescribes = new EntitySet<Prescribe>(new Action<Prescribe>(this.attach_Prescribes), new Action<Prescribe>(this.detach_Prescribes));
			this._Trained_Ins = new EntitySet<Trained_In>(new Action<Trained_In>(this.attach_Trained_Ins), new Action<Trained_In>(this.detach_Trained_Ins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="Int NOT NULL")]
		public int SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Affiliated_With", Storage="_Affiliated_Withs", ThisKey="EmployeeID", OtherKey="Physician")]
		public EntitySet<Affiliated_With> Affiliated_Withs
		{
			get
			{
				return this._Affiliated_Withs;
			}
			set
			{
				this._Affiliated_Withs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Undergoe", Storage="_Undergoes", ThisKey="EmployeeID", OtherKey="Physician")]
		public EntitySet<Undergoe> Undergoes
		{
			get
			{
				return this._Undergoes;
			}
			set
			{
				this._Undergoes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Appointment", Storage="_Appointments", ThisKey="EmployeeID", OtherKey="Physician")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Department", Storage="_Departments", ThisKey="EmployeeID", OtherKey="Head")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Patient", Storage="_Patients", ThisKey="EmployeeID", OtherKey="PCP")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Prescribe", Storage="_Prescribes", ThisKey="EmployeeID", OtherKey="Physician")]
		public EntitySet<Prescribe> Prescribes
		{
			get
			{
				return this._Prescribes;
			}
			set
			{
				this._Prescribes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Trained_In", Storage="_Trained_Ins", ThisKey="EmployeeID", OtherKey="Physician")]
		public EntitySet<Trained_In> Trained_Ins
		{
			get
			{
				return this._Trained_Ins;
			}
			set
			{
				this._Trained_Ins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Affiliated_Withs(Affiliated_With entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = this;
		}
		
		private void detach_Affiliated_Withs(Affiliated_With entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = null;
		}
		
		private void attach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = this;
		}
		
		private void detach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Physician = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Physician = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Physician = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Physician = null;
		}
		
		private void attach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = this;
		}
		
		private void detach_Prescribes(Prescribe entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = null;
		}
		
		private void attach_Trained_Ins(Trained_In entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = this;
		}
		
		private void detach_Trained_Ins(Trained_In entity)
		{
			this.SendPropertyChanging();
			entity.Physician1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescribes")]
	public partial class Prescribe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Physician;
		
		private int _Patient;
		
		private int _Medication;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _Appointment;
		
		private string _Dose;
		
		private EntityRef<Appointment> _Appointment1;
		
		private EntityRef<Medication> _Medication1;
		
		private EntityRef<Patient> _Patient1;
		
		private EntityRef<Physician> _Physician1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicianChanging(int value);
    partial void OnPhysicianChanged();
    partial void OnPatientChanging(int value);
    partial void OnPatientChanged();
    partial void OnMedicationChanging(int value);
    partial void OnMedicationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAppointmentChanging(System.Nullable<int> value);
    partial void OnAppointmentChanged();
    partial void OnDoseChanging(string value);
    partial void OnDoseChanged();
    #endregion
		
		public Prescribe()
		{
			this._Appointment1 = default(EntityRef<Appointment>);
			this._Medication1 = default(EntityRef<Medication>);
			this._Patient1 = default(EntityRef<Patient>);
			this._Physician1 = default(EntityRef<Physician>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Physician
		{
			get
			{
				return this._Physician;
			}
			set
			{
				if ((this._Physician != value))
				{
					if (this._Physician1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianChanging(value);
					this.SendPropertyChanging();
					this._Physician = value;
					this.SendPropertyChanged("Physician");
					this.OnPhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Patient
		{
			get
			{
				return this._Patient;
			}
			set
			{
				if ((this._Patient != value))
				{
					if (this._Patient1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientChanging(value);
					this.SendPropertyChanging();
					this._Patient = value;
					this.SendPropertyChanged("Patient");
					this.OnPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medication", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Medication
		{
			get
			{
				return this._Medication;
			}
			set
			{
				if ((this._Medication != value))
				{
					if (this._Medication1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicationChanging(value);
					this.SendPropertyChanging();
					this._Medication = value;
					this.SendPropertyChanged("Medication");
					this.OnMedicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment", DbType="Int")]
		public System.Nullable<int> Appointment
		{
			get
			{
				return this._Appointment;
			}
			set
			{
				if ((this._Appointment != value))
				{
					if (this._Appointment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentChanging(value);
					this.SendPropertyChanging();
					this._Appointment = value;
					this.SendPropertyChanged("Appointment");
					this.OnAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dose", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Dose
		{
			get
			{
				return this._Dose;
			}
			set
			{
				if ((this._Dose != value))
				{
					this.OnDoseChanging(value);
					this.SendPropertyChanging();
					this._Dose = value;
					this.SendPropertyChanged("Dose");
					this.OnDoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Prescribe", Storage="_Appointment1", ThisKey="Appointment", OtherKey="AppointmentID", IsForeignKey=true)]
		public Appointment Appointment1
		{
			get
			{
				return this._Appointment1.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment1.Entity;
				if (((previousValue != value) 
							|| (this._Appointment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment1.Entity = null;
						previousValue.Prescribes.Remove(this);
					}
					this._Appointment1.Entity = value;
					if ((value != null))
					{
						value.Prescribes.Add(this);
						this._Appointment = value.AppointmentID;
					}
					else
					{
						this._Appointment = default(Nullable<int>);
					}
					this.SendPropertyChanged("Appointment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medication_Prescribe", Storage="_Medication1", ThisKey="Medication", OtherKey="Code", IsForeignKey=true)]
		public Medication Medication1
		{
			get
			{
				return this._Medication1.Entity;
			}
			set
			{
				Medication previousValue = this._Medication1.Entity;
				if (((previousValue != value) 
							|| (this._Medication1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medication1.Entity = null;
						previousValue.Prescribes.Remove(this);
					}
					this._Medication1.Entity = value;
					if ((value != null))
					{
						value.Prescribes.Add(this);
						this._Medication = value.Code;
					}
					else
					{
						this._Medication = default(int);
					}
					this.SendPropertyChanged("Medication1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescribe", Storage="_Patient1", ThisKey="Patient", OtherKey="SSN", IsForeignKey=true)]
		public Patient Patient1
		{
			get
			{
				return this._Patient1.Entity;
			}
			set
			{
				Patient previousValue = this._Patient1.Entity;
				if (((previousValue != value) 
							|| (this._Patient1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient1.Entity = null;
						previousValue.Prescribes.Remove(this);
					}
					this._Patient1.Entity = value;
					if ((value != null))
					{
						value.Prescribes.Add(this);
						this._Patient = value.SSN;
					}
					else
					{
						this._Patient = default(int);
					}
					this.SendPropertyChanged("Patient1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Prescribe", Storage="_Physician1", ThisKey="Physician", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician1
		{
			get
			{
				return this._Physician1.Entity;
			}
			set
			{
				Physician previousValue = this._Physician1.Entity;
				if (((previousValue != value) 
							|| (this._Physician1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician1.Entity = null;
						previousValue.Prescribes.Remove(this);
					}
					this._Physician1.Entity = value;
					if ((value != null))
					{
						value.Prescribes.Add(this);
						this._Physician = value.EmployeeID;
					}
					else
					{
						this._Physician = default(int);
					}
					this.SendPropertyChanged("Physician1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Procedures")]
	public partial class Procedure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Code;
		
		private string _Name;
		
		private float _Cost;
		
		private EntitySet<Undergoe> _Undergoes;
		
		private EntitySet<Trained_In> _Trained_Ins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCostChanging(float value);
    partial void OnCostChanged();
    #endregion
		
		public Procedure()
		{
			this._Undergoes = new EntitySet<Undergoe>(new Action<Undergoe>(this.attach_Undergoes), new Action<Undergoe>(this.detach_Undergoes));
			this._Trained_Ins = new EntitySet<Trained_In>(new Action<Trained_In>(this.attach_Trained_Ins), new Action<Trained_In>(this.detach_Trained_Ins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Real NOT NULL")]
		public float Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Procedure_Undergoe", Storage="_Undergoes", ThisKey="Code", OtherKey="Procedures")]
		public EntitySet<Undergoe> Undergoes
		{
			get
			{
				return this._Undergoes;
			}
			set
			{
				this._Undergoes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Procedure_Trained_In", Storage="_Trained_Ins", ThisKey="Code", OtherKey="Treatment")]
		public EntitySet<Trained_In> Trained_Ins
		{
			get
			{
				return this._Trained_Ins;
			}
			set
			{
				this._Trained_Ins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Procedure = this;
		}
		
		private void detach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Procedure = null;
		}
		
		private void attach_Trained_Ins(Trained_In entity)
		{
			this.SendPropertyChanging();
			entity.Procedure = this;
		}
		
		private void detach_Trained_Ins(Trained_In entity)
		{
			this.SendPropertyChanging();
			entity.Procedure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomNumber;
		
		private string _RoomType;
		
		private int _BlockFloor;
		
		private int _BlockCode;
		
		private bool _Unavailable;
		
		private EntitySet<Stay> _Stays;
		
		private EntityRef<Block> _Block;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomNumberChanging(int value);
    partial void OnRoomNumberChanged();
    partial void OnRoomTypeChanging(string value);
    partial void OnRoomTypeChanged();
    partial void OnBlockFloorChanging(int value);
    partial void OnBlockFloorChanged();
    partial void OnBlockCodeChanging(int value);
    partial void OnBlockCodeChanged();
    partial void OnUnavailableChanging(bool value);
    partial void OnUnavailableChanged();
    #endregion
		
		public Room()
		{
			this._Stays = new EntitySet<Stay>(new Action<Stay>(this.attach_Stays), new Action<Stay>(this.detach_Stays));
			this._Block = default(EntityRef<Block>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoomNumber
		{
			get
			{
				return this._RoomNumber;
			}
			set
			{
				if ((this._RoomNumber != value))
				{
					this.OnRoomNumberChanging(value);
					this.SendPropertyChanging();
					this._RoomNumber = value;
					this.SendPropertyChanged("RoomNumber");
					this.OnRoomNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RoomType
		{
			get
			{
				return this._RoomType;
			}
			set
			{
				if ((this._RoomType != value))
				{
					this.OnRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._RoomType = value;
					this.SendPropertyChanged("RoomType");
					this.OnRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockFloor", DbType="Int NOT NULL")]
		public int BlockFloor
		{
			get
			{
				return this._BlockFloor;
			}
			set
			{
				if ((this._BlockFloor != value))
				{
					if (this._Block.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlockFloorChanging(value);
					this.SendPropertyChanging();
					this._BlockFloor = value;
					this.SendPropertyChanged("BlockFloor");
					this.OnBlockFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockCode", DbType="Int NOT NULL")]
		public int BlockCode
		{
			get
			{
				return this._BlockCode;
			}
			set
			{
				if ((this._BlockCode != value))
				{
					if (this._Block.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlockCodeChanging(value);
					this.SendPropertyChanging();
					this._BlockCode = value;
					this.SendPropertyChanged("BlockCode");
					this.OnBlockCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unavailable", DbType="Bit NOT NULL")]
		public bool Unavailable
		{
			get
			{
				return this._Unavailable;
			}
			set
			{
				if ((this._Unavailable != value))
				{
					this.OnUnavailableChanging(value);
					this.SendPropertyChanging();
					this._Unavailable = value;
					this.SendPropertyChanged("Unavailable");
					this.OnUnavailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Stay", Storage="_Stays", ThisKey="RoomNumber", OtherKey="Room")]
		public EntitySet<Stay> Stays
		{
			get
			{
				return this._Stays;
			}
			set
			{
				this._Stays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Block_Room", Storage="_Block", ThisKey="BlockFloor,BlockCode", OtherKey="BlockFloor,BlockCode", IsForeignKey=true)]
		public Block Block
		{
			get
			{
				return this._Block.Entity;
			}
			set
			{
				Block previousValue = this._Block.Entity;
				if (((previousValue != value) 
							|| (this._Block.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Block.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Block.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._BlockFloor = value.BlockFloor;
						this._BlockCode = value.BlockCode;
					}
					else
					{
						this._BlockFloor = default(int);
						this._BlockCode = default(int);
					}
					this.SendPropertyChanged("Block");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stays(Stay entity)
		{
			this.SendPropertyChanging();
			entity.Room1 = this;
		}
		
		private void detach_Stays(Stay entity)
		{
			this.SendPropertyChanging();
			entity.Room1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stay")]
	public partial class Stay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StayID;
		
		private int _Patient;
		
		private int _Room;
		
		private System.DateTime _StayStart;
		
		private System.DateTime _StayEnd;
		
		private EntitySet<Undergoe> _Undergoes;
		
		private EntityRef<Patient> _Patient1;
		
		private EntityRef<Room> _Room1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStayIDChanging(int value);
    partial void OnStayIDChanged();
    partial void OnPatientChanging(int value);
    partial void OnPatientChanged();
    partial void OnRoomChanging(int value);
    partial void OnRoomChanged();
    partial void OnStayStartChanging(System.DateTime value);
    partial void OnStayStartChanged();
    partial void OnStayEndChanging(System.DateTime value);
    partial void OnStayEndChanged();
    #endregion
		
		public Stay()
		{
			this._Undergoes = new EntitySet<Undergoe>(new Action<Undergoe>(this.attach_Undergoes), new Action<Undergoe>(this.detach_Undergoes));
			this._Patient1 = default(EntityRef<Patient>);
			this._Room1 = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StayID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StayID
		{
			get
			{
				return this._StayID;
			}
			set
			{
				if ((this._StayID != value))
				{
					this.OnStayIDChanging(value);
					this.SendPropertyChanging();
					this._StayID = value;
					this.SendPropertyChanged("StayID");
					this.OnStayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient", DbType="Int NOT NULL")]
		public int Patient
		{
			get
			{
				return this._Patient;
			}
			set
			{
				if ((this._Patient != value))
				{
					if (this._Patient1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientChanging(value);
					this.SendPropertyChanging();
					this._Patient = value;
					this.SendPropertyChanged("Patient");
					this.OnPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="Int NOT NULL")]
		public int Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					if (this._Room1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StayStart", DbType="DateTime NOT NULL")]
		public System.DateTime StayStart
		{
			get
			{
				return this._StayStart;
			}
			set
			{
				if ((this._StayStart != value))
				{
					this.OnStayStartChanging(value);
					this.SendPropertyChanging();
					this._StayStart = value;
					this.SendPropertyChanged("StayStart");
					this.OnStayStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StayEnd", DbType="DateTime NOT NULL")]
		public System.DateTime StayEnd
		{
			get
			{
				return this._StayEnd;
			}
			set
			{
				if ((this._StayEnd != value))
				{
					this.OnStayEndChanging(value);
					this.SendPropertyChanging();
					this._StayEnd = value;
					this.SendPropertyChanged("StayEnd");
					this.OnStayEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stay_Undergoe", Storage="_Undergoes", ThisKey="StayID", OtherKey="Stay")]
		public EntitySet<Undergoe> Undergoes
		{
			get
			{
				return this._Undergoes;
			}
			set
			{
				this._Undergoes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Stay", Storage="_Patient1", ThisKey="Patient", OtherKey="SSN", IsForeignKey=true)]
		public Patient Patient1
		{
			get
			{
				return this._Patient1.Entity;
			}
			set
			{
				Patient previousValue = this._Patient1.Entity;
				if (((previousValue != value) 
							|| (this._Patient1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient1.Entity = null;
						previousValue.Stays.Remove(this);
					}
					this._Patient1.Entity = value;
					if ((value != null))
					{
						value.Stays.Add(this);
						this._Patient = value.SSN;
					}
					else
					{
						this._Patient = default(int);
					}
					this.SendPropertyChanged("Patient1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Stay", Storage="_Room1", ThisKey="Room", OtherKey="RoomNumber", IsForeignKey=true)]
		public Room Room1
		{
			get
			{
				return this._Room1.Entity;
			}
			set
			{
				Room previousValue = this._Room1.Entity;
				if (((previousValue != value) 
							|| (this._Room1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room1.Entity = null;
						previousValue.Stays.Remove(this);
					}
					this._Room1.Entity = value;
					if ((value != null))
					{
						value.Stays.Add(this);
						this._Room = value.RoomNumber;
					}
					else
					{
						this._Room = default(int);
					}
					this.SendPropertyChanged("Room1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Stay1 = this;
		}
		
		private void detach_Undergoes(Undergoe entity)
		{
			this.SendPropertyChanging();
			entity.Stay1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trained_In")]
	public partial class Trained_In : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Physician;
		
		private int _Treatment;
		
		private System.DateTime _CertificationDate;
		
		private System.DateTime _CertificationExpires;
		
		private EntityRef<Physician> _Physician1;
		
		private EntityRef<Procedure> _Procedure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicianChanging(int value);
    partial void OnPhysicianChanged();
    partial void OnTreatmentChanging(int value);
    partial void OnTreatmentChanged();
    partial void OnCertificationDateChanging(System.DateTime value);
    partial void OnCertificationDateChanged();
    partial void OnCertificationExpiresChanging(System.DateTime value);
    partial void OnCertificationExpiresChanged();
    #endregion
		
		public Trained_In()
		{
			this._Physician1 = default(EntityRef<Physician>);
			this._Procedure = default(EntityRef<Procedure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Physician
		{
			get
			{
				return this._Physician;
			}
			set
			{
				if ((this._Physician != value))
				{
					if (this._Physician1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicianChanging(value);
					this.SendPropertyChanging();
					this._Physician = value;
					this.SendPropertyChanged("Physician");
					this.OnPhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Treatment", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Treatment
		{
			get
			{
				return this._Treatment;
			}
			set
			{
				if ((this._Treatment != value))
				{
					if (this._Procedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreatmentChanging(value);
					this.SendPropertyChanging();
					this._Treatment = value;
					this.SendPropertyChanged("Treatment");
					this.OnTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CertificationDate
		{
			get
			{
				return this._CertificationDate;
			}
			set
			{
				if ((this._CertificationDate != value))
				{
					this.OnCertificationDateChanging(value);
					this.SendPropertyChanging();
					this._CertificationDate = value;
					this.SendPropertyChanged("CertificationDate");
					this.OnCertificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationExpires", DbType="DateTime NOT NULL")]
		public System.DateTime CertificationExpires
		{
			get
			{
				return this._CertificationExpires;
			}
			set
			{
				if ((this._CertificationExpires != value))
				{
					this.OnCertificationExpiresChanging(value);
					this.SendPropertyChanging();
					this._CertificationExpires = value;
					this.SendPropertyChanged("CertificationExpires");
					this.OnCertificationExpiresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physician_Trained_In", Storage="_Physician1", ThisKey="Physician", OtherKey="EmployeeID", IsForeignKey=true)]
		public Physician Physician1
		{
			get
			{
				return this._Physician1.Entity;
			}
			set
			{
				Physician previousValue = this._Physician1.Entity;
				if (((previousValue != value) 
							|| (this._Physician1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physician1.Entity = null;
						previousValue.Trained_Ins.Remove(this);
					}
					this._Physician1.Entity = value;
					if ((value != null))
					{
						value.Trained_Ins.Add(this);
						this._Physician = value.EmployeeID;
					}
					else
					{
						this._Physician = default(int);
					}
					this.SendPropertyChanged("Physician1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Procedure_Trained_In", Storage="_Procedure", ThisKey="Treatment", OtherKey="Code", IsForeignKey=true)]
		public Procedure Procedure
		{
			get
			{
				return this._Procedure.Entity;
			}
			set
			{
				Procedure previousValue = this._Procedure.Entity;
				if (((previousValue != value) 
							|| (this._Procedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Procedure.Entity = null;
						previousValue.Trained_Ins.Remove(this);
					}
					this._Procedure.Entity = value;
					if ((value != null))
					{
						value.Trained_Ins.Add(this);
						this._Treatment = value.Code;
					}
					else
					{
						this._Treatment = default(int);
					}
					this.SendPropertyChanged("Procedure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
